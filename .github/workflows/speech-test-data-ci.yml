# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

###############################################################################
#
# Custom Speech Continuous Improvement Pipeline for GitHub Actions
#
###############################################################################

name: SpeechTestDataCI

on:
  push:
    # Execute on pushes to master.
    # branches:
    #   - master
    # # The push must include updates to testing data.
    # paths:
    #   # The path from the root of the repository to a .zip with .wav files and a
    #   # .txt transcript used for testing.
    #   - "testing/audio-and-trans.zip"
    # tags:
    #   # The workflow may be triggered with or without changes to testing data by
    #   # pushing a tag starting with `BASELINE`, like `BASELINE000`. To push a
    #   # tag, run `git tag -a <<TAG_NAME>>` then `git push origin <<TAG_NAME>>`.
    #   - BASELINE
    #   - BASELINE**

env:
  # V2 Custom Speech models can be either "Acoustic" or "Language" models. The
  # proper paths to the training data for the specific model type should be set
  # in the `speech-train-data-ci-cd.yml` environment variables.
  CUSTOM_SPEECH_MODEL_KIND: "Language"
  # See Language Support for available locales:
  # https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support
  SPEECH_LOCALE: "en-us"
  #############################################################################
  # Testing Data
  #############################################################################
  # The name and extension of the .txt transcript file that will be extracted
  # from `testZipSourcePath`.
  TEST_TRANS_FILE: "trans.txt"
  # The path from the root of the repository to a .zip with .wav files and a
  # .txt transcript used for testing.
  TEST_ZIP_SOURCE_PATH: "testing/audio-and-trans.zip"

jobs:
  #############################################################################
  #
  #   Workflow Setup - Used for updates to any data along with releasing.
  #
  #############################################################################

  setup:
    name: Workflow setup
    runs-on: ubuntu-latest

    steps:
      - name: echo
        run: echo Hello world!

  #############################################################################
  #
  #   Continuous Integration - handle updates to testing data.
  #
  #############################################################################

  test_data_update:
    name: Test benchmark model
    runs-on: ubuntu-latest
    # Execute when setup finishes executing and passes.
    needs: setup

    steps:
      - name: Checkout and download LFS dependencies
        uses: actions/checkout@v2
        with:
          # Indicates all history.
          fetch-depth: "0"
          # lfs: true

      # - name: Checkout LFS objects
      #   run: git lfs checkout

      - name: Set environment variables
        run: |
          echo "::set-env name=CURRENT_COMMIT_HASH::$(git rev-parse --short HEAD)"
          echo ::set-env name=TAG::${GITHUB_REF/refs\/tags\//}
          echo "::set-env name=TEST_AUDIO_ZIP_FILE::test-audio.zip"
          echo "::set-env name=TEST_BUILD_FOLDER_PATH::build-speech-test"

      # https://github.com/msimecek/Azure-Speech-CLI
      - name: Install and configure Azure Speech CLI
        run: |
          dotnet tool install -g azurespeechcli --version 1.5.2
          speech config set -n ${{ secrets.SPEECH_PROJECT_NAME }} -k ${{ secrets.SPEECH_SUBSCRIPTION_KEY }} -r ${{ secrets.SPEECH_RESOURCE_REGION }} -s

      #########################################################################
      # Test the Custom Speech model.
      #########################################################################

      # Assemble the Audio + Human-Labeled Transcript and upload to Speech. Fail
      # if a GUID is not generated.
      - name: Upload audio and human transcript testing data
        run: |
          unzip ${{ env.TEST_ZIP_SOURCE_PATH }} -d ${{ env.TEST_BUILD_FOLDER_PATH }}
      #     zip -r ${{ env.TEST_BUILD_FOLDER_PATH }}/${{ env.TEST_AUDIO_ZIP_FILE }} ${{ env.TEST_BUILD_FOLDER_PATH }} -x "*.txt"
      #     speech dataset create -n audio_trans_test_${{ env.CURRENT_COMMIT_HASH }} -a ${{ env.TEST_BUILD_FOLDER_PATH }}/${{ env.TEST_AUDIO_ZIP_FILE }} -t ${{ env.TEST_BUILD_FOLDER_PATH }}/${{ env.TEST_TRANS_FILE }} --wait > ${{ env.TEST_BUILD_FOLDER_PATH }}/audio-trans-test-upload.txt
      #     audio_trans_test_id=$(cat ${{ env.TEST_BUILD_FOLDER_PATH }}/audio-trans-test-upload.txt | sed -n '3p')
      #     if ! [[ ${audio_trans_test_id//-/} =~ ^[[:xdigit:]]{32}$ ]]
      #     then
      #       echo "::error ::Failed to upload audio and human-labeled transcript testing data. Check that the correct paths are defined in environment variables or re-run all jobs."
      #       exit 1
      #     fi
      #     echo "::set-env name=AUDIO_TRANS_TEST_ID::$(echo $audio_trans_test_id)"

      # Get the benchmark Speech model. Fail if a GUID is not generated.
      # `CUSTOM_SPEECH_MODEL_KIND` will be used to filter results from the
      # `speech model list` command to get the benchmark Speech model.
      - name: Get the benchmark Speech model
        run: |
          speech model list > ${{ env.TEST_BUILD_FOLDER_PATH }}/speech-model-list.txt
          sed -i "/${{ env.CUSTOM_SPEECH_MODEL_KIND }}/!d" ${{ env.TEST_BUILD_FOLDER_PATH }}/speech-model-list.txt
          if ! [[ -s ${{ env.TEST_BUILD_FOLDER_PATH }}/speech-model-list.txt ]]
          then
            speech model list-scenarios --locale ${{ env.SPEECH_LOCALE }} --simple > ${{ env.TEST_BUILD_FOLDER_PATH }}/base-models.txt
            base_model_id=$(head -n 1 ${{ env.TEST_BUILD_FOLDER_PATH }}/base-models.txt)
            if ! [[ ${base_model_id//-/} =~ ^[[:xdigit:]]{32}$ ]]
            then
              echo "::error ::Failed to get the latest baseline model. Possibly re-run all jobs."
              exit 1
            fi
            echo "::set-env name=BASE_MODEL_ID::$(echo $base_model_id)"
          else
            custom_speech_model_id=$(cat ${{ env.TEST_BUILD_FOLDER_PATH }}/speech-model-list.txt | tail -1 | awk '{print $1;}')
            if ! [[ ${custom_speech_model_id//-/} =~ ^[[:xdigit:]]{32}$ ]]
            then
              echo "::error ::Failed to get the benchmark Custom Speech model. Possibly re-run all jobs."
              exit 1
            fi
            echo "::set-env name=CUSTOM_SPEECH_MODEL_ID::$(echo $custom_speech_model_id)"
          fi

      - name: echo
        run: |
          echo cs id ${{ env.CUSTOM_SPEECH_MODEL_ID }}
          echo base id ${{ env.BASE_MODEL_ID }}
